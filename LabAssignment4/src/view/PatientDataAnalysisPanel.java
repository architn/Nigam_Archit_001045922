/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.BMICalculator;
import controller.BloodPressureCalculator;
import controller.CholesterolCalculator;
import controller.ValidationLogic;
import java.awt.Color;
import java.awt.Font;
import javax.swing.table.DefaultTableModel;
import model.AppConstants;
import model.PatientInfo;
import model.PatientRecords;
import model.ResidentInfo;
import model.ResidentRecords;

/**
 *
 * @author architnigam
 */
public class PatientDataAnalysisPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientDataAnalysisPanel
     */
    PatientRecords patientRecords;
    BMICalculator bmiCalculator = new BMICalculator();
    ValidationLogic validationLogic;
    BloodPressureCalculator bloodPressureCalculator = new BloodPressureCalculator();
    CholesterolCalculator cholesterolCalculator = new CholesterolCalculator();
    ResidentRecords residentRecords;
    AppConstants AppConstants = new AppConstants();
    ResidentInfo residentInfo;
    PatientInfo patientInfo;
    
    public PatientDataAnalysisPanel(PatientRecords patientRecords, ResidentRecords residentRecords) throws Exception {
        initComponents();
        this.residentRecords = residentRecords;
        this.patientRecords = patientRecords;
        populateAgeGroupData();
        populateGenderGroupData();
        populateDistrictGroupData();
        populateEthnicityGroupData();
        
        // UI
        setBackground(Color.WHITE);
        Font font = new Font("Helvetica", Font.BOLD,12);
        lblAgeGroup.setFont(font);
        lblDistrict.setFont(font);
        lblGender.setFont(font);
        lblEthnicity.setFont(font);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAgeGroup = new javax.swing.JTable();
        lblAgeGroup = new javax.swing.JLabel();
        lblDistrict = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDistrict = new javax.swing.JTable();
        lblGender = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblGender = new javax.swing.JTable();
        lblEthnicity = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblEthnicity = new javax.swing.JTable();

        tblAgeGroup.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Age Group", "Patients with abnormal BMI", "Patients with abnormal Blood Pressure", "Patients with abnormal Cholestrol"
            }
        ));
        jScrollPane1.setViewportView(tblAgeGroup);

        lblAgeGroup.setText("Patient Analysis on Age Group:");

        lblDistrict.setText("Patient Analysis based on District:");

        tblDistrict.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "District", "Patients with abnormal BMI", "Patients with abnormal Blood Pressure", "Patients with abnormal Cholesterol"
            }
        ));
        jScrollPane2.setViewportView(tblDistrict);

        lblGender.setText("Patient Analysis based on Gender:");

        tblGender.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Gender", "Patients with abnormal BMI", "Patients with abnormal Blood Pressure", "Patients with abnormal Cholesterol"
            }
        ));
        jScrollPane3.setViewportView(tblGender);

        lblEthnicity.setText("Patient Analysis based on Ethnicity:");

        tblEthnicity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ethnicity", "Patients with abnormal BMI", "Patients with abnormal Blood Pressure", "Patients with abnormal Cholesterol"
            }
        ));
        jScrollPane4.setViewportView(tblEthnicity);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAgeGroup)
                            .addComponent(lblGender)
                            .addComponent(lblEthnicity))
                        .addGap(0, 532, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblAgeGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(lblDistrict)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(lblGender)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(lblEthnicity)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void populateAgeGroupData()
    {

        DefaultTableModel model = (DefaultTableModel) tblAgeGroup.getModel();
        model.setColumnCount(4);
        model.setRowCount(5);
        
        int countOfPatientsWithAbnormallBMILevelsAgeGroup1 = 0;
        int countOfPatientsWithAbnormalBPLevelsAgeGroup1 = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsAgeGroup1 = 0;
        
        int countOfPatientsWithAbnormallBMILevelsAgeGroup2 = 0;
        int countOfPatientsWithAbnormalBPLevelsAgeGroup2 = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsAgeGroup2 = 0;
        
        int countOfPatientsWithAbnormallBMILevelsAgeGroup3 = 0;
        int countOfPatientsWithAbnormalBPLevelsAgeGroup3 = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsAgeGroup3 = 0;
        
        int countOfPatientsWithAbnormallBMILevelsAgeGroup4 = 0;
        int countOfPatientsWithAbnormalBPLevelsAgeGroup4 = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsAgeGroup4 = 0;
        
        int countOfPatientsWithAbnormallBMILevelsAgeGroup5 = 0;
        int countOfPatientsWithAbnormalBPLevelsAgeGroup5 = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsAgeGroup5 = 0;
       
        
        
        for(PatientInfo patientInfo: patientRecords.getPatientRecords())
        {
            int bmiCriticalityOfPatient = patientInfo.getBMIDangerLevel();
            int bpCriticalityOfPatient = patientInfo.getBloodPressureDangerLevel();
            int cholesterolCriticalityOfPatient = patientInfo.getCholestrolDangerLevel();
            int ageOfPatient = patientInfo.getAge();

            if(ageOfPatient >= 18 && ageOfPatient <=30)
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormallBMILevelsAgeGroup1++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsAgeGroup1++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsAgeGroup1++;
                }
            }
            else if(ageOfPatient > 30 && ageOfPatient <= 45)
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormallBMILevelsAgeGroup2++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsAgeGroup2++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsAgeGroup2++;
                }
            }
            else if(ageOfPatient >45  && ageOfPatient <= 60)
            {
               if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormallBMILevelsAgeGroup3++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsAgeGroup3++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsAgeGroup3++;
                }
            }
            else if(ageOfPatient >60  && ageOfPatient <= 75)
            {
                 if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormallBMILevelsAgeGroup4++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsAgeGroup4++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsAgeGroup4++;
                }
            }
            
            else if(ageOfPatient > 75)
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormallBMILevelsAgeGroup5++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsAgeGroup5++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsAgeGroup5++;
                }
            }

        }
         tblAgeGroup.setValueAt(AppConstants.AgeGroup1, 0, 0);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormallBMILevelsAgeGroup1, 0, 1);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalBPLevelsAgeGroup1, 0, 2);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsAgeGroup1, 0, 3);
         
         tblAgeGroup.setValueAt(AppConstants.AgeGroup2, 1, 0);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormallBMILevelsAgeGroup2, 1, 1);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalBPLevelsAgeGroup2, 1, 2);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsAgeGroup2, 1, 3);
         
         tblAgeGroup.setValueAt(AppConstants.AgeGroup3, 2, 0);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormallBMILevelsAgeGroup3, 2, 1);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalBPLevelsAgeGroup3, 2, 2);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsAgeGroup3, 2, 3);
         
         tblAgeGroup.setValueAt(AppConstants.AgeGroup4, 3, 0);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormallBMILevelsAgeGroup4, 3, 1);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalBPLevelsAgeGroup4, 3, 2);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsAgeGroup4, 3, 3);
         
         tblAgeGroup.setValueAt(AppConstants.AgeGroup5, 4, 0);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormallBMILevelsAgeGroup5, 4, 1);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalBPLevelsAgeGroup5, 4, 2);
         tblAgeGroup.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsAgeGroup5, 4, 3);
         
    }
    
    private void populateGenderGroupData()
    {
        DefaultTableModel model = (DefaultTableModel) tblGender.getModel();
        model.setColumnCount(4);
        model.setRowCount(3);
        
        int countOfPatientsWithAbnormallBMILevelsMale = 0;
        int countOfPatientsWithAbnormalBPLevelsMale = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsMale = 0;
        
        int countOfPatientsWithAbnormallBMILevelsFemale = 0;
        int countOfPatientsWithAbnormalBPLevelsFemale = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsFemale = 0;
        
        int countOfPatientsWithAbnormallBMILevelsOther = 0;
        int countOfPatientsWithAbnormalBPLevelsOther = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsOther = 0;
        
        for(PatientInfo patientInfo: patientRecords.getPatientRecords())
        {
            int bmiCriticalityOfPatient = patientInfo.getBMIDangerLevel();
            int bpCriticalityOfPatient = patientInfo.getBloodPressureDangerLevel();
            int cholesterolCriticalityOfPatient = patientInfo.getCholestrolDangerLevel();
            String genderOfPatient = patientInfo.getGender();
            
            if(genderOfPatient.equalsIgnoreCase(AppConstants.Male))
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormallBMILevelsMale++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsMale++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsMale++;
                }
            }
            else if(genderOfPatient.equalsIgnoreCase(AppConstants.Female))
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormallBMILevelsFemale++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsFemale++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsFemale++;
                }
            }
            else if(genderOfPatient.equalsIgnoreCase(AppConstants.Other))
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormallBMILevelsOther++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsOther++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsOther++;
                }
            }
        }
         tblGender.setValueAt(AppConstants.Male, 0, 0);
         tblGender.setValueAt(countOfPatientsWithAbnormallBMILevelsMale, 0, 1);
         tblGender.setValueAt(countOfPatientsWithAbnormalBPLevelsMale, 0, 2);
         tblGender.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsMale, 0, 3);
         
         tblGender.setValueAt(AppConstants.Female, 1, 0);
         tblGender.setValueAt(countOfPatientsWithAbnormallBMILevelsFemale, 1, 1);
         tblGender.setValueAt(countOfPatientsWithAbnormalBPLevelsFemale, 1, 2);
         tblGender.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsFemale, 1, 3);
         
         tblGender.setValueAt(AppConstants.Other, 2, 0);
         tblGender.setValueAt(countOfPatientsWithAbnormallBMILevelsOther, 2, 1);
         tblGender.setValueAt(countOfPatientsWithAbnormalBPLevelsOther, 2, 2);
         tblGender.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsOther, 2, 3);
    }
    
    private void populateDistrictGroupData() {
        
        DefaultTableModel model = (DefaultTableModel) tblDistrict.getModel();
        model.setColumnCount(4);
        model.setRowCount(5);
        
        int countOfPatientsWithAbnormalBMILevelsAllston = 0;
        int countOfPatientsWithAbnormalBMILevelsFenway = 0;
        int countOfPatientsWithAbnormalBMILevelsBackBay = 0;
        int countOfPatientsWithAbnormalBMILevelsBeaconHill = 0;
        int countOfPatientsWithAbnormalBMILevelsNorthEnd = 0;
        
        int countOfPatientsWithAbnormalBPLevelsAllston = 0;
        int countOfPatientsWithAbnormalBPLevelsFenway = 0;
        int countOfPatientsWithAbnormalBPLevelsBackBay = 0;
        int countOfPatientsWithAbnormalBPLevelsBeaconHill = 0;
        int countOfPatientsWithAbnormalBPLevelsNorthEnd = 0;
        
        int countOfPatientsWithAbnormalCholesterolLevelsAllston = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsFenway = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsBackBay = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsBeaconHill = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsNorthEnd = 0;
        
        for(PatientInfo patientInfo: patientRecords.getPatientRecords())
        {
            int bmiCriticalityOfPatient = patientInfo.getBMIDangerLevel();
            int bpCriticalityOfPatient = patientInfo.getBloodPressureDangerLevel();
            int cholesterolCriticalityOfPatient = patientInfo.getCholestrolDangerLevel();
            String districtOfPatient = patientInfo.getDistrict();
            
            if(districtOfPatient.equals(AppConstants.Allston))
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsAllston++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsAllston++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsAllston++;
                }
            }
            else if(districtOfPatient.equals(AppConstants.Fenway))
            {
                 if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsFenway++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsFenway++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsFenway++;
                }
            }
            else if(districtOfPatient.equals(AppConstants.BackBay))
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsBackBay++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsBackBay++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsBackBay++;
                }
            }
            else if(districtOfPatient.equals(AppConstants.BeaconHill))
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsBeaconHill++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsBeaconHill++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsBeaconHill++;
                }
            }
            else if(districtOfPatient.equals(AppConstants.NorthEnd))
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsNorthEnd++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsNorthEnd++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsNorthEnd++;
                }
            }
        }
         tblDistrict.setValueAt(AppConstants.Allston, 0, 0);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBMILevelsAllston, 0, 1);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBPLevelsAllston, 0, 2);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsAllston, 0, 3);
         
         tblDistrict.setValueAt(AppConstants.Fenway, 1, 0);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBMILevelsFenway, 1, 1);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBPLevelsFenway, 1, 2);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsFenway, 1, 3);
         
         tblDistrict.setValueAt(AppConstants.BackBay, 2, 0);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBMILevelsBackBay, 2, 1);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBPLevelsBeaconHill, 2, 2);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsBeaconHill, 2, 3);
         
         tblDistrict.setValueAt(AppConstants.BeaconHill, 3, 0);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBMILevelsBeaconHill, 3, 1);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBPLevelsBeaconHill, 3, 2);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsBeaconHill, 3, 3);
         
         tblDistrict.setValueAt(AppConstants.NorthEnd, 4, 0);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBMILevelsNorthEnd, 4, 1);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalBPLevelsNorthEnd, 4, 2);
         tblDistrict.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsNorthEnd, 4, 3);
        
        
        
    }

    private void populateEthnicityGroupData() {
        DefaultTableModel model = (DefaultTableModel) tblEthnicity.getModel();
        model.setColumnCount(4);
        model.setRowCount(6);
        
        int countOfPatientsWithAbnormalBMILevelsWhite = 0;
        int countOfPatientsWithAbnormalBMILevelsAfricanAmerican = 0;
        int countOfPatientsWithAbnormalBMILevelsHispanic = 0;
        int countOfPatientsWithAbnormalBMILevelsAsian = 0;
        int countOfPatientsWithAbnormalBMILevelsAmericanIndian = 0;
        int countOfPatientsWithAbnormalBMILevelsNativeHawaiian = 0;
        
        int countOfPatientsWithAbnormalBPLevelsWhite = 0;
        int countOfPatientsWithAbnormalBPLevelsAfricanAmerican = 0;
        int countOfPatientsWithAbnormalBPLevelsHispanic = 0;
        int countOfPatientsWithAbnormalBPLevelsAsian = 0;
        int countOfPatientsWithAbnormalBPLevelsAmericanIndian = 0;
        int countOfPatientsWithAbnormalBPLevelsNativeHawaiian = 0;
        
        int countOfPatientsWithAbnormalCholesterolLevelsWhite = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsAfricanAmerican = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsHispanic = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsAsian = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsAmericanIndian = 0;
        int countOfPatientsWithAbnormalCholesterolLevelsNativeHawaiian = 0;
        
        for(PatientInfo patientInfo: patientRecords.getPatientRecords())
        {
            int bmiCriticalityOfPatient = patientInfo.getBMIDangerLevel();
            int bpCriticalityOfPatient = patientInfo.getBloodPressureDangerLevel();
            int cholesterolCriticalityOfPatient = patientInfo.getCholestrolDangerLevel();
            String ethnicityOfPatient = patientInfo.getEthinicity();
            
            if(ethnicityOfPatient.equals(AppConstants.WhiteNonHispanic))
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsWhite++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsWhite++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsWhite++;
                }
            }
            else if(ethnicityOfPatient.equals(AppConstants.BlackNonHispanic))
            {
                 if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsAfricanAmerican++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsAfricanAmerican++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsAfricanAmerican++;
                }
            }
            else if(ethnicityOfPatient.equals(AppConstants.Hispanic))
            {
                 if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsHispanic++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsHispanic++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsHispanic++;
                }
            }
            else if(ethnicityOfPatient.equals(AppConstants.Asian))
            {
                 if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsAsian++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsAsian++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsAsian++;
                }
            }
            else if(ethnicityOfPatient.equals(AppConstants.AmericanIndianOrAlaskaNative))
            {
                 if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsAmericanIndian++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsAmericanIndian++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsAmericanIndian++;
                }
            }
            else if(ethnicityOfPatient.equals(AppConstants.NativeHawaiian))
            {
                if(bmiCalculator.doesPatientHaveAbnormalBMI(bmiCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBMILevelsNativeHawaiian++;
                }
                if(bloodPressureCalculator.doesPatientHaveAbnormalBloodPressure(bpCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalBPLevelsNativeHawaiian++;
                }
                if(cholesterolCalculator.doesPatientHaveAbnormalCholesterol(cholesterolCriticalityOfPatient))
                {
                    countOfPatientsWithAbnormalCholesterolLevelsNativeHawaiian++;
                }
            }
        }
        
         tblEthnicity.setValueAt(AppConstants.WhiteNonHispanic, 0, 0);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBMILevelsWhite, 0, 1);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBPLevelsWhite, 0, 2);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsWhite, 0, 3);
         
         tblEthnicity.setValueAt(AppConstants.BlackNonHispanic, 1, 0);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBMILevelsAfricanAmerican, 1, 1);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBPLevelsAfricanAmerican, 1, 2);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsAfricanAmerican, 1, 3);
         
         tblEthnicity.setValueAt(AppConstants.Hispanic, 2, 0);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBMILevelsHispanic, 2, 1);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBPLevelsHispanic, 2, 2);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsHispanic, 2, 3);
         
         tblEthnicity.setValueAt(AppConstants.Asian, 3, 0);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBMILevelsAsian, 3, 1);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBPLevelsAsian, 3, 2);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsAsian, 3, 3);
         
         tblEthnicity.setValueAt(AppConstants.AmericanIndianOrAlaskaNative, 4, 0);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBMILevelsAmericanIndian, 4, 1);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBPLevelsAmericanIndian, 4, 2);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsAmericanIndian, 4, 3);
         
         tblEthnicity.setValueAt(AppConstants.NativeHawaiian, 5, 0);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBMILevelsNativeHawaiian, 5, 1);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalBPLevelsNativeHawaiian, 5, 2);
         tblEthnicity.setValueAt(countOfPatientsWithAbnormalCholesterolLevelsNativeHawaiian, 5, 3);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAgeGroup;
    private javax.swing.JLabel lblDistrict;
    private javax.swing.JLabel lblEthnicity;
    private javax.swing.JLabel lblGender;
    private javax.swing.JTable tblAgeGroup;
    private javax.swing.JTable tblDistrict;
    private javax.swing.JTable tblEthnicity;
    private javax.swing.JTable tblGender;
    // End of variables declaration//GEN-END:variables

    

}

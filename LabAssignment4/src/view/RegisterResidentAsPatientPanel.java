/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ValidationLogic;
import java.awt.Color;
import java.awt.Font;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import model.AppConstants;
import model.PatientRecords;
import model.ResidentInfo;
import model.ResidentRecords;
/**
 *
 * @author architnigam
 */
public class RegisterResidentAsPatientPanel extends javax.swing.JPanel {

    /**
     * Creates new form RegisterResidentAsPatientPanel
     */
    AppConstants AppConstants = new AppConstants();
    ResidentRecords residentRecords;
    ArrayList<String> registeredMRNList;
    PatientRecords patientRecords;
    ValidationLogic validationLogic = new ValidationLogic();
    public RegisterResidentAsPatientPanel(ResidentRecords residentRecords, PatientRecords patientRecords) {
        initComponents();
        this.residentRecords = residentRecords;
        this.patientRecords = patientRecords; 
        
        // UI
        setBackground(Color.WHITE);
         Font font = new Font("Helvetica", Font.BOLD,12);
        Font fontOfTitle = new Font("Helvetica", Font.BOLD,15);
        lblResidentID.setFont(font);
        lblMRN.setFont(font);
        lblFirstName.setFont(font);
        lblLastName.setFont(font);
        lblDOB.setFont(font);
        lblCity.setFont(font);
        lblState.setFont(font);
        lblTitle.setFont(fontOfTitle);
        
        txtResidentID.setEditable(true);
        txtFirstName.setEditable(false);
        txtLastName.setEditable(false);
        txtCity.setEditable(false);
        txtDOB.setEditable(false);
        txtState.setEditable(false);
        txtMRN.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPopulate = new javax.swing.JButton();
        lblResidentID = new javax.swing.JLabel();
        txtResidentID = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        lblState = new javax.swing.JLabel();
        lblMRN = new javax.swing.JLabel();
        btnRegister = new javax.swing.JButton();
        txtLastName = new javax.swing.JTextField();
        txtDOB = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtState = new javax.swing.JTextField();
        txtMRN = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        lblCaution = new javax.swing.JLabel();

        btnPopulate.setText("Populate");
        btnPopulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPopulateActionPerformed(evt);
            }
        });

        lblResidentID.setText("Enter Resident ID: ");

        lblFirstName.setText("First Name: ");

        lblLastName.setText("Last Name:");

        lblDOB.setText("Date of Birth: ");

        lblCity.setText("City: ");

        lblState.setText("State:");

        lblMRN.setText("MRN: ");

        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        lblTitle.setText("REGISTER RESIDENT AS A PATIENT:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(lblCaution))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblResidentID)
                            .addComponent(lblFirstName)
                            .addComponent(lblLastName)
                            .addComponent(lblDOB)
                            .addComponent(lblCity)
                            .addComponent(lblMRN)
                            .addComponent(lblState))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMRN, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitle)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtResidentID, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(btnPopulate)))))
                .addContainerGap(388, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblTitle)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResidentID)
                    .addComponent(txtResidentID, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPopulate))
                .addGap(50, 50, 50)
                .addComponent(lblCaution)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDOB)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCity))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblState)
                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMRN)
                    .addComponent(txtMRN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(btnRegister)
                .addGap(36, 36, 36))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPopulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPopulateActionPerformed
        // TODO add your handling code here:
        String enteredResidentId = txtResidentID.getText();
        int resultsFlag = 0;
        boolean isResidentAlreadyAPatient = false;
  
        if(!enteredResidentId.equals(""))
        {
            for(ResidentInfo residentInfo : residentRecords.getResidentRecords())
           {
           
                if(Integer.parseInt(enteredResidentId) == residentInfo.getResidentID())
                {
                    resultsFlag++;
                    txtFirstName.setText(residentInfo.getResidentFirstName());
                    txtLastName.setText(residentInfo.getResidentLastName());
                    Date dateOfBirth = residentInfo.getDateOfBirth();
                    DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");  
                    String dateOfBirthInString = dateFormat.format(dateOfBirth);  
                    txtDOB.setText(dateOfBirthInString);
                    txtCity.setText(residentInfo.getCityOfResident());
                    txtState.setText(residentInfo.getState());
                    isResidentAlreadyAPatient = residentInfo.isIsResidentAPatient();
                    txtMRN.setText(residentInfo.getMrnOfResident()); 
                    if(isResidentAlreadyAPatient)
                    {
                        lblCaution.setText(AppConstants.ErrorMessageResidentAlreadyAPatient);
                        lblCaution.setForeground(Color.red);
                    }
                    else
                    {
                        lblCaution.setText("");  
                    }
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageResidentIDEmptyFieldSearch);
            txtResidentID.setText("");
            txtFirstName.setText("");
            txtLastName.setText("");
            txtCity.setText("");
            txtDOB.setText("");
            txtMRN.setText("");
            txtState.setText("");
        }
            
         if(resultsFlag == 0)
         {
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageNoResidentsFound);
            txtResidentID.setText("");
            txtFirstName.setText("");
            txtLastName.setText("");
            txtCity.setText("");
            txtDOB.setText("");
            txtMRN.setText("");
            txtState.setText("");
         }
        
    }//GEN-LAST:event_btnPopulateActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add your handling code here:
        int searchResults = 0;
        String firstName = txtFirstName.getText();
        String lastName = txtFirstName.getText();
        String residentID = txtFirstName.getText();
        String city = txtFirstName.getText();
        String state = txtFirstName.getText();
        String dateOfBirth = txtDOB.getText();
        String mrn = txtMRN.getText();
        if( validationLogic.ValidateAllFieldsAreFilledOnRegistration(residentID, firstName, lastName, dateOfBirth, city, state, mrn))
        {
            if(! lblCaution.getText().equals(AppConstants.ErrorMessageResidentAlreadyAPatient))
            {
                for(ResidentInfo residentInfo : residentRecords.getResidentRecords())
                {
                    if(residentInfo.getResidentID() == Integer.parseInt(residentID))
                    {
                        searchResults++;
                        residentInfo.setIsResidentAPatient(true);
                        registeredMRNList = patientRecords.addMRNRecord(mrn);
                        JOptionPane.showMessageDialog(this, AppConstants.RegistrationOfAResidentAsAPatientSuccessful1 +
                                residentID + AppConstants.RegistrationOfAResidentAsAPatientSuccessful2);
                        txtResidentID.setText("");
                        txtFirstName.setText("");
                        txtLastName.setText("");
                        txtCity.setText("");
                        txtDOB.setText("");
                        txtMRN.setText("");
                        txtState.setText("");
                    }
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageResidentAlreadyAPatient);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageAllFieldsNotFilled);
        }
    }//GEN-LAST:event_btnRegisterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPopulate;
    private javax.swing.JButton btnRegister;
    private javax.swing.JLabel lblCaution;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblMRN;
    private javax.swing.JLabel lblResidentID;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMRN;
    private javax.swing.JTextField txtResidentID;
    private javax.swing.JTextField txtState;
    // End of variables declaration//GEN-END:variables
}

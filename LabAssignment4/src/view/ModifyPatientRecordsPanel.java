/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.BMICalculator;
import controller.BloodPressureCalculator;
import controller.CholesterolCalculator;
import controller.ValidationLogic;
import java.awt.Color;
import java.awt.Font;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.AppConstants;
import model.PatientInfo;
import model.PatientRecords;

/**
 *
 * @author architnigam
 */
public class ModifyPatientRecordsPanel extends javax.swing.JPanel {
    
    /**
     * Creates new form ModifyPatientRecords
     */
    PatientRecords patientRecords;
    BMICalculator bmiCalculator = new BMICalculator();
    ValidationLogic validationLogic = new ValidationLogic();
    BloodPressureCalculator bloodPressureCalculator = new BloodPressureCalculator();
    CholesterolCalculator cholesterolCalculator = new CholesterolCalculator();
    AppConstants AppConstants = new AppConstants();
    public ModifyPatientRecordsPanel(PatientRecords patientRecords) {
        initComponents();
        this.patientRecords = patientRecords;
        bmiCalculator = new BMICalculator();
        bloodPressureCalculator = new BloodPressureCalculator();
        cholesterolCalculator = new CholesterolCalculator();
        
        // UI
        setBackground(Color.WHITE);
        Font font = new Font("Helvetica", Font.BOLD,12);
        lblSystole.setFont(font);
        lblDiastole.setFont(font);
        lblCholesterol.setFont(font);
        lblHeight.setFont(font);
        lblWeight.setFont(font);
        Font fontOfButton = new Font("Open Sans", Font.BOLD,12);
        btnUpdateEncounter.setFont(fontOfButton);
        btnUpdate.setFont(fontOfButton);
        btnSearch.setFont(fontOfButton);
        btnDelete.setFont(fontOfButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEncounterRecords = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtMRN = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblWeight = new javax.swing.JLabel();
        lblHeight = new javax.swing.JLabel();
        lblSystole = new javax.swing.JLabel();
        lblDiastole = new javax.swing.JLabel();
        lblCholesterol = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        txtHeight = new javax.swing.JTextField();
        txtSystole = new javax.swing.JTextField();
        txtDiastole = new javax.swing.JTextField();
        txtCholesterol = new javax.swing.JTextField();
        btnUpdateEncounter = new javax.swing.JButton();

        tblEncounterRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "MRN", "Date of Visit", "Height (in inches)", "Weight (inches)", "Systole Reading", "Diastole Reading", "Cholesterol Reading", "BMI Criticality", "Cholesterol Criticality", "Blood Pressure Criticality", "."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEncounterRecords);

        jLabel1.setText("MRN:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblWeight.setText("Weight (in pounds):");

        lblHeight.setText("Height (in inches):");

        lblSystole.setText("Systole Reading: ");

        lblDiastole.setText("Diastole Reading:");

        lblCholesterol.setText("Cholesterol Reading:");

        btnUpdateEncounter.setText("SAVE");
        btnUpdateEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEncounterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMRN, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblWeight)
                            .addComponent(lblHeight)
                            .addComponent(lblSystole)
                            .addComponent(lblDiastole)
                            .addComponent(lblCholesterol))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtWeight)
                            .addComponent(txtHeight)
                            .addComponent(txtSystole)
                            .addComponent(txtDiastole)
                            .addComponent(txtCholesterol, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(btnUpdateEncounter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(600, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMRN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWeight)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeight)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSystole)
                    .addComponent(txtSystole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDiastole)
                    .addComponent(txtDiastole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCholesterol)
                    .addComponent(txtCholesterol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnUpdateEncounter)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        if(!txtMRN.getText().equals(""))
        {
            populateRecords();
        }
        else{
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageEmptyFieldSearch);
        }
        if(tblEncounterRecords.getRowCount() == 0)
        {
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageNoEncounterRecordsFound + " '"+txtMRN.getText()+"'");
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblEncounterRecords.getSelectedRow();
        if(selectedIndex < 0)
        {
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageForNoRowSelected);
        }
        DefaultTableModel model = (DefaultTableModel) tblEncounterRecords.getModel();
        PatientInfo selectedPatient = (PatientInfo) model.getValueAt(selectedIndex, 10);
        
        txtWeight.setText(String.valueOf(selectedPatient.getWeightInPounds()));
        txtHeight.setText(String.valueOf(selectedPatient.getHeightInInches()));
        txtSystole.setText(String.valueOf(selectedPatient.getSystoleReadingInmmHg()));
        txtDiastole.setText(String.valueOf(selectedPatient.getDiastoleReadingInmmHg()));
        txtCholesterol.setText(String.valueOf(selectedPatient.getCholestrolReadingInmgDl()));
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnUpdateEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEncounterActionPerformed
        // TODO add your handling code here:
        String weightInString = txtWeight.getText();
        String heightInString = txtHeight.getText();
        String systoleReadingInString = txtSystole.getText();
        String diastoleReadingInString = txtDiastole.getText();
        String cholesterolReadingInString = txtCholesterol.getText(); 
        
        if(validationLogic.ValidateThatAllFieldsAreFilledDuringUpdate(weightInString, heightInString, systoleReadingInString, 
                diastoleReadingInString, cholesterolReadingInString))
        {
            
            int selectedIndex = tblEncounterRecords.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) tblEncounterRecords.getModel();
            PatientInfo selectedPatientInfo = (PatientInfo) model.getValueAt(selectedIndex, 10);
            
            double weight = Double.parseDouble(weightInString);
            double height = Double.parseDouble(heightInString);
            double systole = Double.parseDouble(systoleReadingInString);
            double diastole = Double.parseDouble(diastoleReadingInString);
            double cholesterol = Double.parseDouble(cholesterolReadingInString);
            double BMIValue = (bmiCalculator.CalculateBMI(weight, height));
            String mrn = selectedPatientInfo.getMedicalRecordNumber();
            
            PatientInfo patientInfo = patientRecords.updatePatientRecord(selectedIndex, selectedPatientInfo);
            patientInfo.setDateOfVisit(new Date());
            patientInfo.setHeightInInches(height);
            patientInfo.setWeightInPounds(weight);
            patientInfo.setSystoleReadingInmmHg(systole);
            patientInfo.setDiastoleReadingInmmHg(diastole);
            patientInfo.setCholestrolReadingInmgDl(cholesterol);
            
            int BMICriticality = bmiCalculator.DetermineBMICriticalityOfPatient(weight, height);  
            String BMICriticalityLevel = bmiCalculator.BMIMapCriticalityLevelToCategory(BMICriticality);
            String BMIMessage = "Patient with MRN '"+mrn+"' BMI value is: '"+BMIValue+"' and the patient's BMI is"
                    + ": "+BMICriticalityLevel; 
            
            
            int CholesterolCriticality = cholesterolCalculator.DetermineCholesterolDangerLevelCriticalityOfPatient(cholesterol);
            String CholesterolCriticalityLevel = cholesterolCalculator.CholesterolMapCriticalityLevelToCategory(CholesterolCriticality);
            String CholesterolMessage = "Patient with MRN '"+mrn+"' cholesterol level is: "+CholesterolCriticalityLevel;

            int BPCriticality = bloodPressureCalculator.DetermineBloodPressureCriticalityOfPatient(systole, diastole);
            String BPCriticalityLevel = bloodPressureCalculator.BPMapCriticalityLevelToCategory(BPCriticality);
            String BPMessage = "Patient with MRN '"+mrn+"' blood pressure level is: "+BPCriticalityLevel;

            String finalMessageOnSave = AppConstants.PatientRecordSuccessfullyUpdatedMessage + "\n \n" +BMIMessage + 
                                        "\n" +BPMessage+ "\n" +CholesterolMessage ; 
            
            patientInfo.setBMI(BMIValue);
            patientInfo.setBMIDangerLevel(BMICriticality);
            patientInfo.setCholestrolDangerLevel(CholesterolCriticality);
            patientInfo.setBloodPressureDangerLevel(BPCriticality);
            
            JOptionPane.showMessageDialog(this, finalMessageOnSave);
            
            
            txtMRN.setText("");
            txtHeight.setText("");
            txtWeight.setText("");
            txtSystole.setText("");
            txtDiastole.setText("");
            txtCholesterol.setText("");
            populateRecords();
            
        }
    }//GEN-LAST:event_btnUpdateEncounterActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblEncounterRecords.getSelectedRow();
        if(selectedIndex < 0)
        {
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageForNoRowSelected);
        }
        DefaultTableModel model = (DefaultTableModel) tblEncounterRecords.getModel();
        PatientInfo selectedPatientProfile = (PatientInfo) model.getValueAt(selectedIndex, 10);
        patientRecords.deletePatientRecord(selectedPatientProfile);
        JOptionPane.showMessageDialog(this, AppConstants.DeleteSuccessful);
        populateRecords();
    }//GEN-LAST:event_btnDeleteActionPerformed
    
    public void populateRecords()
    {
        String searchedMRN = txtMRN.getText();
        DefaultTableModel model = (DefaultTableModel) tblEncounterRecords.getModel();
        model.setRowCount(0);
        int numberOfSearchResults = 0;
        for(PatientInfo pi : patientRecords.getPatientRecords())
        {
            if(searchedMRN.equals(pi.getMedicalRecordNumber()))
            {
                numberOfSearchResults++;
                Object[] row = new Object[11];
                row[0] =  pi.getMedicalRecordNumber();
                row[1] =  pi.getDateOfVisit();
                row[2] =  pi.getHeightInInches();
                row[3] =  pi.getWeightInPounds();
                row[4] =  pi.getSystoleReadingInmmHg();
                row[5] =  pi.getDiastoleReadingInmmHg();
                row[6] =  pi.getCholestrolReadingInmgDl();
            
                int bmiCriticality = pi.getBMIDangerLevel();
                String bmiCriticalityLevel = bmiCalculator.BMIMapCriticalityLevelToCategory(bmiCriticality);
                row[7] = bmiCriticalityLevel;

                int bpCriticality = pi.getBloodPressureDangerLevel();
                String bpCriticalityLevel = bloodPressureCalculator.BPMapCriticalityLevelToCategory(bpCriticality);
                row[8] = bpCriticalityLevel;

                int cholesterolCriticality = pi.getCholestrolDangerLevel();
                String cholesterolCriticalityLevel = cholesterolCalculator.CholesterolMapCriticalityLevelToCategory(cholesterolCriticality);
                row[9] = cholesterolCriticalityLevel;
                row[10] = pi;
                model.addRow(row);
            }
        }
        
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateEncounter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCholesterol;
    private javax.swing.JLabel lblDiastole;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblSystole;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTable tblEncounterRecords;
    private javax.swing.JTextField txtCholesterol;
    private javax.swing.JTextField txtDiastole;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtMRN;
    private javax.swing.JTextField txtSystole;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}

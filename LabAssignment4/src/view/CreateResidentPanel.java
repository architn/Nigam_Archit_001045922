/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.BMICalculator;
import controller.BloodPressureCalculator;
import controller.CholesterolCalculator;
import controller.ValidationLogic;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import model.AppConstants;
import model.PatientInfo;
import model.PatientRecords;
import model.ResidentInfo;
import model.ResidentRecords;
import model.UserProfile;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author architnigam
 */
public class CreateResidentPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateResidentPanel
     */
    ResidentRecords residentRecords;
    PatientRecords patientRecords;
    AppConstants AppConstants = new AppConstants();
    PatientInfo patientInfo;
    ValidationLogic validationLogic = new ValidationLogic();
    BMICalculator bmiCalculator;
    BloodPressureCalculator bloodPressureCalculator;
    CholesterolCalculator cholesterolCalculator;
    ArrayList<String> registeredMRNList;
    UserProfile userProfile;
    
    public CreateResidentPanel(ResidentRecords residentRecords, PatientRecords patientRecords, UserProfile userProfile) {
        initComponents();
        this.residentRecords = residentRecords;
        this.patientRecords = patientRecords;
        this.userProfile = userProfile;
        bmiCalculator = new BMICalculator();
        bloodPressureCalculator = new BloodPressureCalculator();
        cholesterolCalculator = new CholesterolCalculator();
        DetermineIfXMLDataHasBeenPopulated();
        
        
        // UI
        setBackground(Color.WHITE);
        Font font = new Font("Helvetica", Font.BOLD,12);
        Font fontOfTitle = new Font("Helvetica", Font.BOLD,15);
        lblTitle.setFont(fontOfTitle);
        lblFirstName.setFont(font);
        lblState.setFont(font);
        lblLastName.setFont(font);
        lblDateOfBirth.setFont(font);
        lblAddress.setFont(font);
        lblCity.setFont(font);
        lblMRN.setFont(font);
        lblSSN.setFont(font);
        lblZipCode.setFont(font);
        lblIsResidentAPatient.setFont(font);
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblDateOfBirth = new javax.swing.JLabel();
        lblSSN = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblZipCode = new javax.swing.JLabel();
        lblMRN = new javax.swing.JLabel();
        lblIsResidentAPatient = new javax.swing.JLabel();
        checkboxIsResidentAPatient = new javax.swing.JCheckBox();
        btnSaveResidentDetails = new javax.swing.JButton();
        txtMRN = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtSSN = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtZipCode = new javax.swing.JTextField();
        dobDateOfBirth = new com.toedter.calendar.JDateChooser();
        ddCity = new javax.swing.JComboBox<>();
        lblTitle = new javax.swing.JLabel();
        lblState = new javax.swing.JLabel();
        ddState = new javax.swing.JComboBox<>();
        btnPrePopulate = new javax.swing.JButton();

        lblFirstName.setText("First Name: ");

        lblLastName.setText("Last Name: ");

        lblDateOfBirth.setText("Date of Birth: ");

        lblSSN.setText("SSN: ");

        lblAddress.setText("Address: ");

        lblCity.setText("City: ");

        lblZipCode.setText("Zip Code: ");

        lblMRN.setText("MRN: ");

        lblIsResidentAPatient.setText("Is Resident a Patient: ");

        btnSaveResidentDetails.setText("Save Resident Details");
        btnSaveResidentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveResidentDetailsActionPerformed(evt);
            }
        });

        ddCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York", "Folsom", "Austin" }));

        lblTitle.setText("CREATE RESIDENT RECORD(S): ");

        lblState.setText("State:");

        ddState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MA", "NY", "CA", "TX" }));

        btnPrePopulate.setText("Pre-Populate Data");
        btnPrePopulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrePopulateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIsResidentAPatient)
                            .addComponent(lblMRN)
                            .addComponent(lblZipCode)
                            .addComponent(lblFirstName)
                            .addComponent(lblLastName)
                            .addComponent(lblSSN)
                            .addComponent(lblAddress)
                            .addComponent(lblDateOfBirth)
                            .addComponent(lblCity)
                            .addComponent(lblState))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSaveResidentDetails)
                                .addGap(18, 18, 18)
                                .addComponent(btnPrePopulate))
                            .addComponent(checkboxIsResidentAPatient)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMRN, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dobDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ddCity, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ddState, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(246, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLastName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(lblDateOfBirth))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(dobDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSSN)
                    .addComponent(txtSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblState)
                    .addComponent(ddState, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(ddCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZipCode)
                    .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMRN)
                    .addComponent(txtMRN, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIsResidentAPatient)
                    .addComponent(checkboxIsResidentAPatient))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveResidentDetails)
                    .addComponent(btnPrePopulate))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveResidentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveResidentDetailsActionPerformed
        // TODO add your handling code here:
        String firstName = txtFirstName.getText();
        String lastName = txtLastName.getText();
        Date dateOfBirth = dobDateOfBirth.getDate();
        String ssn = txtSSN.getText();
        String mrn = txtMRN.getText();
        String address = txtAddress.getText();
        String state = ddState.getSelectedItem().toString();
        String city = ddCity.getSelectedItem().toString();
        String zipCode = txtZipCode.getText();
        
        boolean isResidentAPatient = checkboxIsResidentAPatient.isSelected();
        
        
        ResidentInfo residentInfo = residentRecords.addResidentRecord();
        
        if(validationLogic.ValidateIfAllFieldsAreFilledOnCreateResident
                            (firstName, lastName, address, zipCode, String.valueOf(dateOfBirth), ssn, mrn) 
                && validationLogic.ValidateIfPatientIsAbove18YearsOfAge(dateOfBirth))
        {
            residentInfo.setResidentID(residentRecords.GenerateResidentID());
            residentInfo.setResidentFirstName(firstName);
            residentInfo.setResidentLastName(lastName);
            residentInfo.setDateOfBirth(dateOfBirth);
            residentInfo.setSsnOfresident(ssn);
            residentInfo.setMrnOfResident(mrn);
            residentInfo.setAddressOfresident(address);
            residentInfo.setState(state);
            residentInfo.setCityOfResident(city);
            int ageOfResident = residentRecords.CalculateAgeOfPatient(dateOfBirth);
            residentInfo.setAgeOfResident(ageOfResident);
            if(isResidentAPatient)
            {
               registeredMRNList = patientRecords.addMRNRecord(mrn);
                residentInfo.setIsResidentAPatient(true);
            }
            else{
                residentInfo.setIsResidentAPatient(false);
            }
            String residentID = String.valueOf(residentRecords.GenerateResidentID());
            JOptionPane.showMessageDialog(this, AppConstants.ResidentAddedSuccessfullyMessage + residentID + "'");

            txtFirstName.setText("");
            txtLastName.setText("");
            dobDateOfBirth.setDate(new Date());
            txtSSN.setText("");
            txtMRN.setText("");
            txtAddress.setText("");
            txtZipCode.setText("");
        }
        
    }//GEN-LAST:event_btnSaveResidentDetailsActionPerformed

    private void btnPrePopulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrePopulateActionPerformed
        // TODO add your handling code here:
         String projectPath = System.getProperty("user.dir");
        boolean isResidentAPatient = false;

        try
             {
                File patientRecordXMLFile = new File(projectPath + AppConstants.EncountersXMLFilePath);
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(patientRecordXMLFile);
                doc.getDocumentElement().normalize();

                NodeList nList = doc.getElementsByTagName("encounter");

            for (int temp = 0; temp < nList.getLength(); temp++) 
            {
                Node nNode = nList.item(temp);

                if (nNode.getNodeType() == Node.ELEMENT_NODE) 
                {
                    Element eElement = (Element) nNode;

                   String mrn = (eElement.getAttribute(AppConstants.nodeMRN));
                   int age = Integer.parseInt(eElement.getElementsByTagName(AppConstants.nodeAge)
                                        .item(0).getTextContent());
                   String ethinicity = eElement.getElementsByTagName(AppConstants.nodeEthinicity)
                                        .item(0).getTextContent();
                   String gender = eElement.getElementsByTagName(AppConstants.nodeGender)
                                        .item(0).getTextContent();
 
                   String district = eElement.getElementsByTagName(AppConstants.nodeDistrict)
                                        .item(0).getTextContent();
                   String dateOfVisitInString = eElement.getElementsByTagName(AppConstants.nodeDateOfVisit)
                                        .item(0).getTextContent();
                   double weight = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeWeight)
                                        .item(0).getTextContent());
                    double height = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeHeight)
                                        .item(0).getTextContent());
                    double cholestrolReading = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeCholestrolReading)
                                        .item(0).getTextContent());
                    double systoleReading = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeSystoleReading)
                                        .item(0).getTextContent()); 
                    double diastoleReading = Double.parseDouble(eElement.getElementsByTagName(AppConstants.nodeDiastoleReading)
                                        .item(0).getTextContent());
                    double BMIValue = (bmiCalculator.CalculateBMI(weight, height));
                   
                    patientInfo = patientRecords.addPatientRecord();
                    
                    
                    int BMICriticality = bmiCalculator.DetermineBMICriticalityOfPatient(weight, height);
                    int CholesterolCriticality = cholesterolCalculator.DetermineCholesterolDangerLevelCriticalityOfPatient(cholestrolReading);
                    int BPCriticality = bloodPressureCalculator.DetermineBloodPressureCriticalityOfPatient(systoleReading, diastoleReading);
                    
                    patientInfo.setMedicalRecordNumber(mrn);
                    patientInfo.setEthinicity(ethinicity);
                    patientInfo.setAge(age);
                    patientInfo.setGender(gender);
                    patientInfo.setDistrict(district);
                    Date dateOfVisit =new SimpleDateFormat("MM/dd/yyyy").parse(dateOfVisitInString);
                    patientInfo.setDateOfVisit(dateOfVisit);
                    patientInfo.setWeightInPounds(weight);
                    patientInfo.setHeightInInches(height);
                    patientInfo.setCholestrolReadingInmgDl(cholestrolReading);
                    patientInfo.setSystoleReadingInmmHg(systoleReading);
                    patientInfo.setDiastoleReadingInmmHg(diastoleReading);
                    patientInfo.setBMI(BMIValue);
                    patientInfo.setBMIDangerLevel(BMICriticality);
                    patientInfo.setCholestrolDangerLevel(CholesterolCriticality);
                    patientInfo.setBloodPressureDangerLevel(BPCriticality);
                }
                
            }
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
         // Populating Resident Records
        try
             {
                File residentRecordXMLFile = new File(projectPath + AppConstants.ResidentXMLFilePath);
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(residentRecordXMLFile);
                doc.getDocumentElement().normalize();

                NodeList nList = doc.getElementsByTagName("resident");

            for (int temp = 0; temp < nList.getLength(); temp++) 
            {
                Node nNode = nList.item(temp);

                if (nNode.getNodeType() == Node.ELEMENT_NODE) 
                {
                    Element eElement = (Element) nNode;

                   int residentIDInResidentRecords = Integer.parseInt(eElement.getAttribute(AppConstants.nodeID));
                   String firstName = eElement.getElementsByTagName(AppConstants.nodeFirstName)
                                        .item(0).getTextContent();
 
                   String lastName = eElement.getElementsByTagName(AppConstants.nodeLastName)
                                        .item(0).getTextContent();
                   String dateOfBirthInString = eElement.getElementsByTagName(AppConstants.nodeDateofBirth)
                                        .item(0).getTextContent();
                   String gender = (eElement.getElementsByTagName(AppConstants.nodeGender)
                                        .item(0).getTextContent());
                   String ssn =   (eElement.getElementsByTagName(AppConstants.nodeSSN)
                                        .item(0).getTextContent());
                   String address = (eElement.getElementsByTagName(AppConstants.nodeAddress)
                                        .item(0).getTextContent());
                  
                   String city =     (eElement.getElementsByTagName(AppConstants.nodeCity)
                                        .item(0).getTextContent());
                   String zipCode = (eElement.getElementsByTagName(AppConstants.nodeZipCode)
                                        .item(0).getTextContent());
                    
                    String state = eElement.getElementsByTagName(AppConstants.nodeState)
                                        .item(0).getTextContent();
                    String mrn = eElement.getElementsByTagName(AppConstants.nodeMRN)
                                        .item(0).getTextContent();
                    String isResidentAPatientInString = eElement.getElementsByTagName(AppConstants.nodeisResidentAPatient)
                                        .item(0).getTextContent();
                    
                    ResidentInfo ri = residentRecords.addResidentRecord();
                    
                    ri.setResidentID(residentIDInResidentRecords);
                    ri.setResidentFirstName(firstName);
                    ri.setResidentLastName(lastName);
                    Date dateOfBirth =new SimpleDateFormat("MM/dd/yyyy").parse(dateOfBirthInString);
                  
                    ri.setDateOfBirth(dateOfBirth);
                    ri.setSsnOfresident(ssn);
                    ri.setAddressOfresident(address);
                    ri.setCityOfResident(city);
                    ri.setZipCode(zipCode);
                    ri.setState(state);
                    ri.setMrnOfResident(mrn);
                    
                    if(isResidentAPatientInString.equals("true"))
                    {
                        isResidentAPatient = true;
                    }
                    else{
                        isResidentAPatient = false;
                    }
                    ri.setIsResidentAPatient(isResidentAPatient); 
                }
                
            }
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        // Linking Resident IDs and MRN
         try
         {
                File residentAndMRNLinkXMLFile = new File(projectPath + AppConstants.PathOfRegisteredPatientXMLFile);
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(residentAndMRNLinkXMLFile);
                doc.getDocumentElement().normalize();

                NodeList nList = doc.getElementsByTagName("resident");
                
                for (int temp = 0; temp < nList.getLength(); temp++) 
                {
                    Node nNode = nList.item(temp);

                    if (nNode.getNodeType() == Node.ELEMENT_NODE) 
                    {
                        Element eElement = (Element) nNode;

                        String mrn = eElement.getElementsByTagName(AppConstants.nodeMRN)
                                        .item(0).getTextContent();
                         registeredMRNList = patientRecords.addMRNRecord(mrn);
                    }
                }
             }
         catch(Exception ex)
         {
             ex.printStackTrace();
         }

        JOptionPane.showMessageDialog(this, AppConstants.DataSuccessfullySaved);
        userProfile.setHasDataBeenPopulated(true);
        DetermineIfXMLDataHasBeenPopulated();
    }//GEN-LAST:event_btnPrePopulateActionPerformed
    
    private void DetermineIfXMLDataHasBeenPopulated()
    {
        if(userProfile.isHasDataBeenPopulated())
        {
            btnPrePopulate.setEnabled(false);
        }
        else{
            btnPrePopulate.setEnabled(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPrePopulate;
    private javax.swing.JButton btnSaveResidentDetails;
    private javax.swing.JCheckBox checkboxIsResidentAPatient;
    private javax.swing.JComboBox<String> ddCity;
    private javax.swing.JComboBox<String> ddState;
    private com.toedter.calendar.JDateChooser dobDateOfBirth;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblDateOfBirth;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblIsResidentAPatient;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblMRN;
    private javax.swing.JLabel lblSSN;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblZipCode;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMRN;
    private javax.swing.JTextField txtSSN;
    private javax.swing.JTextField txtZipCode;
    // End of variables declaration//GEN-END:variables
}

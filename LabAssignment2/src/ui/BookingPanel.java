/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

/**
 *
 * @author architnigam
 */

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.AppConstants;
import model.CarProfile;
import model.CarRecords;
public class BookingPanel extends javax.swing.JPanel {

    /**
     * Creates new form BookingPanel
     */
    CarRecords carRecords;
    AppConstants AppConstants = new AppConstants();
    
    public BookingPanel(CarRecords carRecords) {
        initComponents();
        this.carRecords = carRecords;
        populateFirstAvailableCar();
        populateRecords();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFirstAvailableCar = new javax.swing.JTable();
        btnBookFirstAvailableCar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCars = new javax.swing.JTable();
        btnBookCar = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jLabel1.setText("First Available Car:");

        tblFirstAvailableCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Car ID", "Driver Name", "Car Name", "Vehicle Number", "Availability", "Location", "Maximum Capacity", "Certificate Expiry", "Car"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFirstAvailableCar);

        btnBookFirstAvailableCar.setText("Book First Available Car");
        btnBookFirstAvailableCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookFirstAvailableCarActionPerformed(evt);
            }
        });

        jLabel2.setText("All Cars:");

        tblCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Car ID", "Driver Name", "Car Name", "Vehicle Number", "Availability", "Location", "Maximum Capacity", "Certificate Expiry", "Car"
            }
        ));
        jScrollPane3.setViewportView(tblCars);

        btnBookCar.setText("Book Car");
        btnBookCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookCarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnBookFirstAvailableCar)))
                        .addGap(0, 546, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(btnBookCar))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBookFirstAvailableCar)
                .addGap(32, 32, 32)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnBookCar)
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBookCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookCarActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblCars.getSelectedRow();
         if(selectedIndex < 0)
        {
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageForNoRowSelected);
        }
        DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
        CarProfile selectedCarProfile = (CarProfile) model.getValueAt(selectedIndex, 8);
        
        if(selectedCarProfile.getAvailabilityStatus().equals(AppConstants.CarIsAvailableForRide))
        {
            JOptionPane.showMessageDialog(this, AppConstants.SuccessfulBookingMessage);
            selectedCarProfile.setIsCarAvailableOrNot(false);
            selectedCarProfile.setAvailabilityStatus(AppConstants.CarIsBookedForRide);
            populateFirstAvailableCar();
            populateRecords();
        }
        else{
            JOptionPane.showMessageDialog(this, AppConstants.UnsuccessfulBookingMessage);
        }
    }//GEN-LAST:event_btnBookCarActionPerformed

    private void btnBookFirstAvailableCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookFirstAvailableCarActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblFirstAvailableCar.getSelectedRow();
         if(selectedIndex < 0)
        {
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageForNoRowSelected);
        }
        DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
        CarProfile selectedCarProfile = (CarProfile) model.getValueAt(selectedIndex, 8);
        
        if(selectedCarProfile.getAvailabilityStatus().equals(AppConstants.CarIsAvailableForRide))
        {
            JOptionPane.showMessageDialog(this, AppConstants.SuccessfulBookingMessage);
            selectedCarProfile.setIsCarAvailableOrNot(false);
            selectedCarProfile.setAvailabilityStatus(AppConstants.CarIsBookedForRide);
            populateFirstAvailableCar();
            populateRecords();
        }
        else{
            JOptionPane.showMessageDialog(this, AppConstants.UnsuccessfulBookingMessage);
        }
    }//GEN-LAST:event_btnBookFirstAvailableCarActionPerformed
     private void populateRecords() {
        DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
        model.setRowCount(0);
        
        for(CarProfile cp : carRecords.getCarRecords())
        {
            Object[] row = new Object[9];
            row[0] = cp.getCarID();
            row[1] =  cp.getDriverName();
            row[2] =  cp.getCarBrand() + " "+ cp.getCarModelNumber();
            row[3] = cp.getCarSerialNumber();
            row[4] = cp.getAvailabilityStatus();
            row[5] = cp.getCarLoctatedInCity();
            row[6] = cp.getMaximumSeatingCapacity();
            row[7] = cp.getCreateUpdateTimeStamp();
            row[8] = cp;
            model.addRow(row);
        }
    }   
    
    private void populateFirstAvailableCar()
    {
        DefaultTableModel model = (DefaultTableModel) tblFirstAvailableCar.getModel();
        model.setRowCount(0);
        
        for(CarProfile cp : carRecords.getCarRecords())
        {
             if(cp.getIsCarAvailableOrNot())
             {
                 Object[] row = new Object[9];
                 row[0] = cp.getCarID();
                 row[1] =  cp.getDriverName();
                 row[2] =  cp.getCarBrand() + " "+ cp.getCarModelNumber();
                 row[3] = cp.getCarSerialNumber();
                 row[4] = cp.getAvailabilityStatus();
                 row[5] = cp.getCarLoctatedInCity();
                 row[6] = cp.getMaximumSeatingCapacity();
                 row[7] = cp.getCreateUpdateTimeStamp();
                 row[8] = cp;
                 model.addRow(row);
             }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBookCar;
    private javax.swing.JButton btnBookFirstAvailableCar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblCars;
    private javax.swing.JTable tblFirstAvailableCar;
    // End of variables declaration//GEN-END:variables
}

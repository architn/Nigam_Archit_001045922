/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.Calendar;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.AppConstants;
import model.CarProfile;
import model.CarRecords;
import model.ValidationLogic;

/**
 *
 * @author architnigam
 */
public class ViewCarProfilePanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewCarProfilePanel
     */
    CarRecords carRecords; 
    CarProfile carProfile;
    JFrame frame;
    AppConstants AppConstants = new AppConstants();
    ValidationLogic validationLogic = new ValidationLogic();
    public ViewCarProfilePanel(CarRecords carRecords) {
        initComponents();
        this.carRecords = carRecords;
        populateRecords();
        dateChooserLicenseExpiryDate.setMinSelectableDate(new Date());
        txtSerialNumber.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCars = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblCreateManufactureYear = new javax.swing.JLabel();
        lblCreateSeatingCapacity = new javax.swing.JLabel();
        lblCreateSerialNumber = new javax.swing.JLabel();
        lblCreateModelNumber = new javax.swing.JLabel();
        lblCreateCity = new javax.swing.JLabel();
        lblCreateLicenseExpiry = new javax.swing.JLabel();
        lblCreateAvailability = new javax.swing.JLabel();
        btnUpdateCarDetails = new javax.swing.JButton();
        txtDriverName = new javax.swing.JTextField();
        ddCarBrand = new javax.swing.JComboBox<>();
        txtMaxSeatingCapacity = new javax.swing.JTextField();
        txtSerialNumber = new javax.swing.JTextField();
        txtModelNumber = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        checkBoxCreateAvailability = new javax.swing.JCheckBox();
        ddManufactureYear = new com.toedter.calendar.JYearChooser();
        dateChooserLicenseExpiryDate = new com.toedter.calendar.JDateChooser();
        lblUpdateDriverName = new javax.swing.JLabel();
        ddCity = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        lblTitle.setText("                                                            VIEW CAR DETAILS:");

        tblCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "CAR ID", "DRIVER NAME", "CAR NAME", "VEHICLE NUMBER", "AVAILABILITY", "LOCATION", "MAXIMUM CAPACITY", "Creation Date Timestamp", "Car"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCars);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblCreateManufactureYear.setText("Manufacture Year:");

        lblCreateSeatingCapacity.setText("Maximum Seating Capacity:");

        lblCreateSerialNumber.setText("Vehicle Number Index:*");

        lblCreateModelNumber.setText("Model Number:");

        lblCreateCity.setText("City: ");

        lblCreateLicenseExpiry.setText("License Expiry Date:");

        lblCreateAvailability.setText("Available for Use:");

        btnUpdateCarDetails.setText("Update Car Details");
        btnUpdateCarDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCarDetailsActionPerformed(evt);
            }
        });

        txtDriverName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDriverNameActionPerformed(evt);
            }
        });

        ddCarBrand.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Toyota", "BMW", "Audi", "Chevrolet", "Nissan", "Honda", "Hyundai", "Mercedes", "Ford", "Dodge", "Skoda", "KIA" }));

        lblUpdateDriverName.setText("Driver Name");

        ddCity.setText("Car Brand");

        jLabel1.setText("* Field(s) marked in asterix cannot be updated");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 777, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(btnUpdateCarDetails)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCreateSeatingCapacity)
                                    .addComponent(lblCreateManufactureYear)
                                    .addComponent(lblCreateSerialNumber)
                                    .addComponent(lblCreateModelNumber)
                                    .addComponent(lblCreateCity)
                                    .addComponent(lblUpdateDriverName)
                                    .addComponent(ddCity)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCreateLicenseExpiry)
                                    .addComponent(lblCreateAvailability))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ddCarBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDriverName, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ddManufactureYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMaxSeatingCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateChooserLicenseExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkBoxCreateAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(382, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdate)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDelete)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDriverName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUpdateDriverName))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ddCity)
                    .addComponent(ddCarBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCreateManufactureYear)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCreateSeatingCapacity)
                            .addComponent(txtMaxSeatingCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCreateSerialNumber)
                            .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ddManufactureYear, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCreateModelNumber)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCreateCity))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCreateLicenseExpiry)
                    .addComponent(dateChooserLicenseExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCreateAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(btnUpdateCarDetails))
                    .addComponent(checkBoxCreateAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateCarDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCarDetailsActionPerformed
        // TODO add your handling code here:
        if(validationLogic.EnsureNoFieldIsEmpty(txtDriverName, ddCarBrand, ddManufactureYear, txtMaxSeatingCapacity, txtModelNumber,
            txtSerialNumber, txtCity, dateChooserLicenseExpiryDate)
        && validationLogic.EnsureThatMaxSeatingCapacityIsANumber(txtMaxSeatingCapacity))
        {
            String driverName = txtDriverName.getText();
            String carBrand = ddCarBrand.getSelectedItem().toString();
            int manufactureYear = ddManufactureYear.getYear();
            String maximumCapacityOfCar = txtMaxSeatingCapacity.getText();
            String vehicleNumber = txtSerialNumber.getText();
            String modelNumber = txtModelNumber.getText();
            String city = txtCity.getText();
            Date licenseExpiryDate = dateChooserLicenseExpiryDate.getDate();
            boolean isCarAvailable = checkBoxCreateAvailability.isSelected();
            
            int selectedIndex = tblCars.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
            CarProfile selectedCarProfile = (CarProfile) model.getValueAt(selectedIndex, 8);
            
            if(!selectedCarProfile.getAvailabilityStatus().equals(AppConstants.CarIsBookedForRide))
            {
                CarProfile carProfile = carRecords.updateCarRecord(selectedIndex, selectedCarProfile);
                int carID = carProfile.getCarID();
                carProfile.setCarID(carID);
                carProfile.setDriverName(driverName);
                carProfile.setCarBrand(carBrand);
                carProfile.setCarManufactureYear(manufactureYear);
                carProfile.setMaximumSeatingCapacity(Integer.parseInt(maximumCapacityOfCar));
                carProfile.setCarModelNumber(modelNumber);
                carProfile.setCarSerialNumber(vehicleNumber);
                carProfile.setCarLocatedInCity(city);
                carProfile.setCarExpirationDate(licenseExpiryDate);
                carProfile.setIsCarAvailableOrNot(isCarAvailable);
                
                if(isCarAvailable)
                {
                    carProfile.setAvailabilityStatus(AppConstants.CarIsAvailableForRide);
                }
                else{
                     carProfile.setAvailabilityStatus(AppConstants.CarIsUnavailableForRide);
                }
                
                carProfile.setCreateUpdateTimeStamp(new Date());

                JOptionPane.showMessageDialog(this, AppConstants.SuccessfulCarUpdatedMessage);
                populateRecords();
                // Clearing fields
                txtDriverName.setText("");
                ddCarBrand.setSelectedIndex(0);
                ddManufactureYear.setYear(Calendar.getInstance().get(Calendar.YEAR));
                txtMaxSeatingCapacity.setText("");
                txtSerialNumber.setText("");
                txtModelNumber.setText("");
                txtCity.setText("");
            }
            else{
                JOptionPane.showMessageDialog(this, AppConstants.UnsuccessfulCarUpdationMessage);
            }

           
        }
    }//GEN-LAST:event_btnUpdateCarDetailsActionPerformed

    private void txtDriverNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDriverNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDriverNameActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblCars.getSelectedRow();
        if(selectedIndex < 0)
        {
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageForNoRowSelected);
        }
        DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
        CarProfile selectedCarProfile = (CarProfile) model.getValueAt(selectedIndex, 8);
        
        if(! (selectedCarProfile.getAvailabilityStatus().equals(AppConstants.CarIsBookedForRide)))
        {
            carRecords.deleteCarProfile(selectedCarProfile);
            JOptionPane.showMessageDialog(this, AppConstants.SuccessfulCarDeletionMessage);
            populateRecords();
        }
        else{
            JOptionPane.showMessageDialog(this, AppConstants.UnsuccessfulCarDeletionMessage);
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblCars.getSelectedRow();
         if(selectedIndex < 0)
        {
            JOptionPane.showMessageDialog(this, AppConstants.ErrorMessageForNoRowSelected);
        }
        DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
        CarProfile selectedCarProfile = (CarProfile) model.getValueAt(selectedIndex, 8);
        
         if(! (selectedCarProfile.getAvailabilityStatus().equals(AppConstants.CarIsBookedForRide)))
         {
             txtDriverName.setText(selectedCarProfile.getDriverName());
             ddCarBrand.setSelectedItem(selectedCarProfile.getCarBrand());
             ddManufactureYear.setStartYear(selectedCarProfile.getCarManufactureYear());
             txtMaxSeatingCapacity.setText(String.valueOf(selectedCarProfile.getMaximumSeatingCapacity()));
             txtSerialNumber.setText(selectedCarProfile.getCarSerialNumber());
             txtModelNumber.setText(selectedCarProfile.getCarModelNumber());
             txtCity.setText(selectedCarProfile.getCarLoctatedInCity());
             dateChooserLicenseExpiryDate.setDate(selectedCarProfile.getCarExpirationDate());
             checkBoxCreateAvailability.setSelected(selectedCarProfile.getIsCarAvailableOrNot());
         }
         else{
             JOptionPane.showMessageDialog(this, AppConstants.UnsuccessfulCarUpdationMessage);
         }
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateCarDetails;
    private javax.swing.JCheckBox checkBoxCreateAvailability;
    private com.toedter.calendar.JDateChooser dateChooserLicenseExpiryDate;
    private javax.swing.JComboBox<String> ddCarBrand;
    private javax.swing.JLabel ddCity;
    private com.toedter.calendar.JYearChooser ddManufactureYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCreateAvailability;
    private javax.swing.JLabel lblCreateCity;
    private javax.swing.JLabel lblCreateLicenseExpiry;
    private javax.swing.JLabel lblCreateManufactureYear;
    private javax.swing.JLabel lblCreateModelNumber;
    private javax.swing.JLabel lblCreateSeatingCapacity;
    private javax.swing.JLabel lblCreateSerialNumber;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUpdateDriverName;
    private javax.swing.JTable tblCars;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtDriverName;
    private javax.swing.JTextField txtMaxSeatingCapacity;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtSerialNumber;
    // End of variables declaration//GEN-END:variables

    private void populateRecords() {
        DefaultTableModel model = (DefaultTableModel) tblCars.getModel();
        model.setRowCount(0);
        
        for(CarProfile cp : carRecords.getCarRecords())
        {
            Object[] row = new Object[9];
            row[0] = cp.getCarID();
            row[1] =  cp.getDriverName();
            row[2] =  cp.getCarBrand() + " "+ cp.getCarModelNumber();
            row[3] = cp.getCarSerialNumber();
            row[4] = cp.getAvailabilityStatus();
            row[5] = cp.getCarLoctatedInCity();
            row[6] = cp.getMaximumSeatingCapacity();
            row[7] = cp.getCreateUpdateTimeStamp();
            row[8] = cp;
            model.addRow(row);
        }
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import model.AppConstants;
import model.CarProfile;
import model.CarRecords;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author architnigam
 */
public class ImportDataFromXML extends javax.swing.JPanel {

    /**
     * Creates new form ImportDataFromXML
     */
    CarProfile carProfile = new CarProfile();
    CarRecords carRecords;
    JFrame frame;
    AppConstants AppConstants = new AppConstants();
    public ImportDataFromXML(CarRecords carRecords) {
        initComponents();
        this.carRecords = carRecords;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFileUpload = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFilePath = new javax.swing.JTextField();
        btnOpen = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnInternalPopulate = new javax.swing.JButton();

        lblFileUpload.setText("File Upload: ");

        jLabel2.setText("                                            Import Data from XML file");

        btnOpen.setText("Open");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        jLabel1.setText("OR");

        jLabel3.setText("Populate Results:");

        btnInternalPopulate.setText("Populate");
        btnInternalPopulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInternalPopulateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(27, 27, 27)
                                .addComponent(btnInternalPopulate))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFileUpload)
                                .addGap(26, 26, 26)
                                .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnOpen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpload)))))
                .addGap(0, 148, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFileUpload)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpen)
                    .addComponent(btnUpload))
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnInternalPopulate))
                .addContainerGap(128, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        // TODO add your handling code here:
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.showOpenDialog(null);
    File file = fileChooser.getSelectedFile();
    String filename = file.getAbsolutePath();
    txtFilePath.setText(filename);
    carProfile.setPathOfXMLFile(txtFilePath.getText());
    
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        // TODO add your handling code here:      
        if(!txtFilePath.getText().equals(""))
        {
             try
             {
                File carRecordXMLFile = new File(txtFilePath.getText());
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(carRecordXMLFile);
                doc.getDocumentElement().normalize();

                NodeList nList = doc.getElementsByTagName("car");

            for (int temp = 0; temp < nList.getLength(); temp++) 
            {
                Node nNode = nList.item(temp);

                if (nNode.getNodeType() == Node.ELEMENT_NODE) 
                {
                    Element eElement = (Element) nNode;

                   int carID = Integer.parseInt(eElement.getAttribute(AppConstants.nodeID));
                    String driverName = eElement.getElementsByTagName(AppConstants.nodeDriverName)
                                        .item(0).getTextContent();
                    String carBrand = eElement.getElementsByTagName(AppConstants.nodeCarBrand)
                                        .item(0).getTextContent();
                    int manufactureYear = Integer.parseInt(eElement.getElementsByTagName(AppConstants.nodeManufactureYear)
                                        .item(0).getTextContent());
                    int maximumSeatingCapacity = Integer.parseInt(eElement.getElementsByTagName(AppConstants.nodeMaxSeatingCapacity)
                                        .item(0).getTextContent()); 
                    String carSerialNumber = eElement.getElementsByTagName(AppConstants.nodeVehicleNumber)
                                        .item(0).getTextContent();
                    String carModelNumber = eElement.getElementsByTagName(AppConstants.nodeModelNumber)
                                        .item(0).getTextContent();
                    String cityLocation = eElement.getElementsByTagName(AppConstants.nodeCity)
                                        .item(0).getTextContent();
                    String licenseExpiry = eElement.getElementsByTagName(AppConstants.nodeLicenseExpiryDate)
                                        .item(0).getTextContent();
                    CarProfile cp = carRecords.addNewCarRecord();

                    cp.setCarID(carID);
                    cp.setDriverName(driverName);
                    cp.setCarBrand(carBrand);
                    cp.setCarManufactureYear(manufactureYear);
                    cp.setMaximumSeatingCapacity(maximumSeatingCapacity);
                    cp.setCarSerialNumber(carSerialNumber);
                    cp.setCarModelNumber(carModelNumber);
                    cp.setCarLocatedInCity(cityLocation);
                    cp.setPathOfXMLFile("");
                     String carAvailabilityStatus = eElement.getElementsByTagName("availability").item(0).getTextContent();

                     if(carAvailabilityStatus.equalsIgnoreCase("available"))
                     {
                         cp.setIsCarAvailableOrNot(true);
                         cp.setAvailabilityStatus(AppConstants.CarIsAvailableForRide);
                     }
                     else if(carAvailabilityStatus.equalsIgnoreCase("unavailable"))
                     {
                         cp.setIsCarAvailableOrNot(false);
                         cp.setAvailabilityStatus(AppConstants.CarIsUnavailableForRide);
                     }

                     cp.setCreateUpdateTimeStamp(new Date());
                     Date expiryDateOfLicense =new SimpleDateFormat("MM/dd/yyyy").parse(licenseExpiry);  
                     cp.setCarExpirationDate(expiryDateOfLicense);
                     cp.setModeOfAddition(AppConstants.modeOfAdditionXML);
                     
                }
                
            }
            JOptionPane.showMessageDialog(frame, AppConstants.SuccessMessageForXMLupload);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        }
        
        else{
            JOptionPane.showMessageDialog(frame, AppConstants.ErrorMessageForXMLupload);
        }
       
        
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnInternalPopulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInternalPopulateActionPerformed
        // TODO add your handling code here:
        String projectPath = System.getProperty("user.dir");
        try{
            File carRecordXMLFile = new File(projectPath + AppConstants.XMLFilePath);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(carRecordXMLFile);
            doc.getDocumentElement().normalize();

            NodeList nList = doc.getElementsByTagName("car");

            for (int temp = 0; temp < nList.getLength(); temp++) 
            {
                Node nNode = nList.item(temp);

                if (nNode.getNodeType() == Node.ELEMENT_NODE) 
                {
                    Element eElement = (Element) nNode;

                    int carID = Integer.parseInt(eElement.getAttribute(AppConstants.nodeID));
                    String driverName = eElement.getElementsByTagName(AppConstants.nodeDriverName)
                                        .item(0).getTextContent();
                    String carBrand = eElement.getElementsByTagName(AppConstants.nodeCarBrand)
                                        .item(0).getTextContent();
                    int manufactureYear = Integer.parseInt(eElement.getElementsByTagName(AppConstants.nodeManufactureYear)
                                        .item(0).getTextContent());
                    int maximumSeatingCapacity = Integer.parseInt(eElement.getElementsByTagName(AppConstants.nodeMaxSeatingCapacity)
                                        .item(0).getTextContent()); 
                    String carSerialNumber = eElement.getElementsByTagName(AppConstants.nodeVehicleNumber)
                                        .item(0).getTextContent();
                    String carModelNumber = eElement.getElementsByTagName(AppConstants.nodeModelNumber)
                                        .item(0).getTextContent();
                    String cityLocation = eElement.getElementsByTagName(AppConstants.nodeCity)
                                        .item(0).getTextContent();
                    String licenseExpiry = eElement.getElementsByTagName(AppConstants.nodeLicenseExpiryDate)
                                        .item(0).getTextContent();
                    CarProfile cp = carRecords.addNewCarRecord();

                    cp.setCarID(carID);
                    cp.setDriverName(driverName);
                    cp.setCarBrand(carBrand);
                    cp.setCarManufactureYear(manufactureYear);
                    cp.setMaximumSeatingCapacity(maximumSeatingCapacity);
                    cp.setCarSerialNumber(carSerialNumber);
                    cp.setCarModelNumber(carModelNumber);
                    cp.setCarLocatedInCity(cityLocation);
                    cp.setPathOfXMLFile("");
                     String carAvailabilityStatus = eElement.getElementsByTagName("availability").item(0).getTextContent();

                     if(carAvailabilityStatus.equalsIgnoreCase("available"))
                     {
                         cp.setIsCarAvailableOrNot(true);
                         cp.setAvailabilityStatus(AppConstants.CarIsAvailableForRide);
                     }
                     else if(carAvailabilityStatus.equalsIgnoreCase("unavailable"))
                     {
                         cp.setIsCarAvailableOrNot(false);
                         cp.setAvailabilityStatus(AppConstants.CarIsUnavailableForRide);
                     }
                     cp.setCreateUpdateTimeStamp(new Date()); 
                     Date expiryDateOfLicense =new SimpleDateFormat("MM/dd/yyyy").parse(licenseExpiry);  
                     cp.setCarExpirationDate(expiryDateOfLicense);
                     cp.setModeOfAddition(AppConstants.modeOfAdditionXML);
                }   
           }
            JOptionPane.showMessageDialog(frame, AppConstants.SuccessMessageForXMLupload);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnInternalPopulateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInternalPopulate;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnUpload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblFileUpload;
    private javax.swing.JTextField txtFilePath;
    // End of variables declaration//GEN-END:variables
}
